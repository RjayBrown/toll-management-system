import mongoose from "mongoose";

const accountSchema = new mongoose.Schema(
	{
		accountNumber: {
			type: Number,
			required: true,
		},
		demographics: {
			title: String,
			firstName: { type: String, required: true },
			lastName: { type: String, required: true },
			middleInitial: String,
			address: {
				addressType: { type: String, required: true },
				addressLine1: { type: String, required: true },
				addressLine2: { type: String, default: null },
				zip: { type: String, default: null },
				zipPlus4: { type: String, default: null },
				postalCode: { type: String, default: null },
				city: { type: String, required: true },
				state: { type: String, default: null },
				province: { type: String, default: null },
				country: { type: String, required: true },
				deliverable: { type: Boolean, required: true, default: true },
			},
			primaryPhone: { type: String, required: true },
			cellPhone: { type: String, required: true },
			email: { type: String, required: true },
			contacts: [
				{
					primary: { type: Boolean, required: true, default: false },
					title: { type: String, default: null },
					firstName: { type: String, required: true },
					lastName: { type: String, required: true },
					middleInitial: { type: String, default: null },
					primaryPhone: { type: Number, required: true },
					cellPhone: { type: Number, required: true },
				},
			],
		},
		agency: { type: String, required: true },
		accountType: { type: String, required: true },
		accountStatus: { type: String, required: true },
		securityQuestion: { type: String, required: true, default: null },
		securityAnswer: { type: String, required: true, default: null },
		payMethod: { type: String, required: true },
		rebillAmount: { type: Number, required: true, default: 25 },
		corrDeliveryMode: { type: String, required: true, default: null },
		stmtDeliveryMode: { type: String, required: true, default: null },
		stmtFrequency: { type: String, required: true, default: null },
		mobileAlerts: { type: Boolean, required: true, default: false },
		tollEmailAlerts: { type: Boolean, required: true, default: false },
		vehicles: [
			{
				licensePlate: { type: String, required: true },
				state: { type: String, required: true },
				type: { type: String, required: true },
				dateModified: { type: Date, required: true, default: Date.now },
				year: { type: Number, required: true, default: null },
				make: { type: String, required: true, default: null },
				model: { type: String, required: true, default: null },
				residentPlan: { type: String, required: true, default: null },
				suspended: { type: Boolean, required: true, default: false },
				current: { type: Boolean, required: true, default: false },
			},
		],
		devices: [
			{
				deviceNumber: { type: Number, required: true },
				status: { type: String, required: true, default: "ACTIVE" },
				type: { type: String, required: true, default: "INTERIOR" },
				activationDate: { type: Date, required: true, default: Date.now },
				swapped: { type: Boolean, required: true, default: false },
				swapDate: { type: Date, default: null },
				deposit: { type: Number, required: true, default: 16 },
			},
		],
		plans: [
			{
				planName: { type: String, required: true },
				deviceNumber: { type: String, default: null },
				startDate: { type: Date, required: true, default: Date.now },
				endDate: { type: Date, default: null },
				planStatus: { type: String, required: true },
				planDescription: { type: String, required: true },
			},
		],
		accountBalance: { type: Number, required: true },
		tolls: [
			{
				transactionDate: { type: Date, required: true },
				postedDate: { type: Date, required: true, default: Date.now },
				dueDate: { type: Date, default: Date.now() + 86400000 * 30 },
				violationDate: { type: Date, default: Date.now() + 86400000 * 60 },
				collectionDate: { type: Date, default: Date.now() + 86400000 * 90 },
				amountPayable: { type: Number, required: true },
				amountPaid: { type: Number, required: true },
				tollAmount: { type: Number, required: true },
				lateFee: { type: Number, required: true },
				violationFee: { type: Number, required: true },
				paidInFull: { type: Boolean, required: true, default: false },
				payDate: { type: Date, default: null },
				entryPlaza: { type: String, required: true },
				exitPlaza: { type: String, default: null },
				licensePlate: { type: Number, required: true, default: null },
				deviceNumber: { type: Number, required: true, default: null },
				invoiceNumber: { type: Number, required: true, default: null },
				violationNumber: { type: Number, required: true, default: null },
				imgLink: [{ type: String, required: true, default: null }],
				tollStatus: { type: String, required: true },
				repost: { type: Boolean, required: true, default: false },
				disputed: { type: Boolean, required: true, default: false },
			},
		],
		tollBillBalance: { type: Number, required: true, default: 0 },
		violationBalance: { type: Number, required: true, default: 0 },
		violationFees: { type: Number, required: true, default: 0 },
		billOverpayment: { type: Number, required: true, default: 0 },
		lastPaymentDate: { type: Date, required: true, default: null },
		lastTollDate: { type: Date, default: null },
		accountOpenDate: { type: Date, required: true, default: Date.now },
		suspendedReg: { type: Boolean, required: true, default: false },
		oosHold: { type: Boolean, required: true, default: false },
		notes: [
			{
				type: { type: String, required: true },
				subType: { type: String, required: true },
				dateCreated: { type: Date, required: true, default: Date.now },
				createdBy: { type: String, required: true },
				description: { type: String, required: true },
			},
		],
		serviceRequest: [
			{
				dateOpened: { type: Date, required: true, default: Date.now },
				dateClosed: { type: Date, default: null },
				status: { type: String, required: true },
				queue: { type: String, required: true },
				priority: { type: String, required: true },
			},
		],
	},
	{ timestamps: true }
);

const Account = mongoose.model("Driver Account", accountSchema);

export default Account;
